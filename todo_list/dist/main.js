(()=>{"use strict";var n={208:(n,e,t)=>{t.d(e,{A:()=>p});var r=t(354),o=t.n(r),a=t(314),A=t.n(a),i=t(417),s=t.n(i),d=new URL(t(970),t.b),c=A()(o());c.push([n.id,"@import url(https://fonts.googleapis.com/css?family=Roboto Mono);"]);var l=s()(d);c.push([n.id,`:root{\n    --light-blue: #b3e0ff;\n    --dark-mode-gray: #2b2b2b;\n    --light-gray: #525252;\n    --start-green: #6af1a3;\n    --stop-red: #ff7a61;\n}\n\n*{\n    margin: 0;\n    padding: 0;\n    color: white; /* all text color is white (dark mode) */\n}\n\nbody{\n    font-family: 'Roboto Mono';\n    height: 100vh;\n    background: var(--dark-mode-gray);\n}\n\nhr{ /* have to override default hr styles */\n    margin: 0;\n    align-self: stretch;\n}\n\n.divider{\n    width: 75%;\n    align-self: center;\n}\n\n/* HEADER */\n#header{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 24px;\n\n    margin-top: 24px;\n    margin-bottom: 24px;\n}\n\n/* CONTENT */\n#content{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 24px;\n}\n\n/* POMODORO TIMER */\n.pomodoro-timer{\n    background-color: var(--light-gray);\n    border-radius: 20px;\n    border: 3px solid var(--dark-mode-gray);\n    box-shadow: var(--light-blue) 4px 4px 0 0,black 4px 4px 0 1px;\n    padding: 10px 20px;\n    transition: transform 0.2s;\n    width: 45%;\n    height: fit-content;\n    text-align: center;\n    padding: 28px 0px;\n}\n\n.timer-circle{\n    border-radius: 50%;\n    width: 100px;\n    height: 100px;\n    margin: 20px auto; /* 20px top and bottom, auto left and right */\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 24px;\n    color: black;\n    border: 8px solid var(--start-green);\n}\n\n#timer{\n    color: white;\n}\n\n.timer-controls{\n    margin-top: 35px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 24px;\n}\n\n.timer-controls button{\n    font-family: inherit;\n    font-size: 14px;\n    padding: 10px 20px;\n    border-radius: 12px;\n    cursor: pointer;\n    background: var(--light-gray);\n    border: 2px solid white;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\n\n    /* animation */\n    transition: transform .2s;\n}\n\n.timer-controls button:hover{\n    transform: scale(1.25);\n}\n\n.button-disabled{\n    pointer-events: none;\n    background-color: #d5d5d5;\n}\n\n#toggle-timer-btn{\n    border: 2px solid var(--dark-mode-gray);\n    color: var(--dark-mode-gray);\n    background-color: var(--start-green);\n}\n\n/* .toggle-timer-btn-paused{\n    background-color: red;\n} */\n\n/* TASK LIST */\n#task-container{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    width: 45%;\n    gap: 24px;\n}\n\n.task-item{\n    display: flex;\n    gap: 24px;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n}\n\n.task-text{ /* Task input field */\n    background-color: var(--light-gray);\n    font-size: 18px;\n    font-family: inherit;\n    width: 75%;\n    padding: 16px 14px;\n    border-radius: 16px;\n    border: none;\n    border-left: 8px solid var(--start-green);\n}\n\n.task-text:focus{ /* Selecting a task input field */\n    outline: none;\n    border: 1px solid var(--light-blue);\n}\n\n.delete-task-btn{\n    background: var(--stop-red);\n    border: none;\n    padding: 8px;\n    width: 3rem;\n    height: 3rem;\n    border-radius: 50%;\n}\n\n[type=checkbox] {\n    width: 3rem;\n    height: 3rem;\n    color: var(--start-green); /* background when checked */\n    vertical-align: middle;\n    appearance: none;\n    background: none;\n    border: 0;\n    outline: 0;\n    flex-grow: 0;\n    border-radius: 50%;\n    background-color: var(--light-gray); /* Background when not checked */\n    transition: background 300ms;\n    cursor: pointer;\n  }\n  \n  /* Pseudo element for check styling */\n  [type=checkbox]::before {\n    content: "";\n    color: transparent;\n    display: block;\n    width: inherit;\n    height: inherit;\n    border-radius: inherit;\n    border: 0;\n    background-color: transparent;\n    background-size: contain;\n    box-shadow: inset 0 0 0 1px #CCD3D8;\n  }\n  \n  /* Checked */\n  [type=checkbox]:checked {\n    background-color: currentcolor;\n  }\n  \n  [type=checkbox]:checked::before {\n    box-shadow: none;\n    background-image: url(${l});\n  }\n\n/* ADD / SAVE TASK BUTTON */\n#add-task-btn{\n    font-family: inherit; /* Ensures we use the imported font */\n    width: 150px;\n    padding-top: 16px;\n    padding-bottom: 16px;\n    border-radius: 20px;\n    background: var(--light-gray);\n    font-size: larger;\n\n    border: 2px solid black;\n    box-shadow: var(--light-blue) 4px 4px 0 0,black 4px 4px 0 1px;\n\n    transition: transform .2s;\n}\n\n#add-task-btn:hover{\n    transform: scale(1.15);\n}\n\n#save-tasks-btn{\n    font-family: inherit; /* Ensures we use the imported font */\n    width: 150px;\n    padding-top: 16px;\n    padding-bottom: 16px;\n    border-radius: 20px;\n    background: var(--light-gray);\n    font-size: larger;\n    margin-bottom: 24px; /* Add some space to the bottom of the page. */\n\n    border: 2px solid black;\n    box-shadow: var(--light-blue) 4px 4px 0 0,black 4px 4px 0 1px;\n\n    transition: transform .2s;\n}\n\n#save-tasks-btn:hover{\n    transform: scale(1.15);\n}\n\n\n\n\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["@import url('https://fonts.googleapis.com/css?family=Roboto Mono');\n\n:root{\n    --light-blue: #b3e0ff;\n    --dark-mode-gray: #2b2b2b;\n    --light-gray: #525252;\n    --start-green: #6af1a3;\n    --stop-red: #ff7a61;\n}\n\n*{\n    margin: 0;\n    padding: 0;\n    color: white; /* all text color is white (dark mode) */\n}\n\nbody{\n    font-family: 'Roboto Mono';\n    height: 100vh;\n    background: var(--dark-mode-gray);\n}\n\nhr{ /* have to override default hr styles */\n    margin: 0;\n    align-self: stretch;\n}\n\n.divider{\n    width: 75%;\n    align-self: center;\n}\n\n/* HEADER */\n#header{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 24px;\n\n    margin-top: 24px;\n    margin-bottom: 24px;\n}\n\n/* CONTENT */\n#content{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 24px;\n}\n\n/* POMODORO TIMER */\n.pomodoro-timer{\n    background-color: var(--light-gray);\n    border-radius: 20px;\n    border: 3px solid var(--dark-mode-gray);\n    box-shadow: var(--light-blue) 4px 4px 0 0,black 4px 4px 0 1px;\n    padding: 10px 20px;\n    transition: transform 0.2s;\n    width: 45%;\n    height: fit-content;\n    text-align: center;\n    padding: 28px 0px;\n}\n\n.timer-circle{\n    border-radius: 50%;\n    width: 100px;\n    height: 100px;\n    margin: 20px auto; /* 20px top and bottom, auto left and right */\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 24px;\n    color: black;\n    border: 8px solid var(--start-green);\n}\n\n#timer{\n    color: white;\n}\n\n.timer-controls{\n    margin-top: 35px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 24px;\n}\n\n.timer-controls button{\n    font-family: inherit;\n    font-size: 14px;\n    padding: 10px 20px;\n    border-radius: 12px;\n    cursor: pointer;\n    background: var(--light-gray);\n    border: 2px solid white;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\n\n    /* animation */\n    transition: transform .2s;\n}\n\n.timer-controls button:hover{\n    transform: scale(1.25);\n}\n\n.button-disabled{\n    pointer-events: none;\n    background-color: #d5d5d5;\n}\n\n#toggle-timer-btn{\n    border: 2px solid var(--dark-mode-gray);\n    color: var(--dark-mode-gray);\n    background-color: var(--start-green);\n}\n\n/* .toggle-timer-btn-paused{\n    background-color: red;\n} */\n\n/* TASK LIST */\n#task-container{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    width: 45%;\n    gap: 24px;\n}\n\n.task-item{\n    display: flex;\n    gap: 24px;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n}\n\n.task-text{ /* Task input field */\n    background-color: var(--light-gray);\n    font-size: 18px;\n    font-family: inherit;\n    width: 75%;\n    padding: 16px 14px;\n    border-radius: 16px;\n    border: none;\n    border-left: 8px solid var(--start-green);\n}\n\n.task-text:focus{ /* Selecting a task input field */\n    outline: none;\n    border: 1px solid var(--light-blue);\n}\n\n.delete-task-btn{\n    background: var(--stop-red);\n    border: none;\n    padding: 8px;\n    width: 3rem;\n    height: 3rem;\n    border-radius: 50%;\n}\n\n[type=checkbox] {\n    width: 3rem;\n    height: 3rem;\n    color: var(--start-green); /* background when checked */\n    vertical-align: middle;\n    appearance: none;\n    background: none;\n    border: 0;\n    outline: 0;\n    flex-grow: 0;\n    border-radius: 50%;\n    background-color: var(--light-gray); /* Background when not checked */\n    transition: background 300ms;\n    cursor: pointer;\n  }\n  \n  /* Pseudo element for check styling */\n  [type=checkbox]::before {\n    content: \"\";\n    color: transparent;\n    display: block;\n    width: inherit;\n    height: inherit;\n    border-radius: inherit;\n    border: 0;\n    background-color: transparent;\n    background-size: contain;\n    box-shadow: inset 0 0 0 1px #CCD3D8;\n  }\n  \n  /* Checked */\n  [type=checkbox]:checked {\n    background-color: currentcolor;\n  }\n  \n  [type=checkbox]:checked::before {\n    box-shadow: none;\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E %3Cpath d='M15.88 8.29L10 14.17l-1.88-1.88a.996.996 0 1 0-1.41 1.41l2.59 2.59c.39.39 1.02.39 1.41 0L17.3 9.7a.996.996 0 0 0 0-1.41c-.39-.39-1.03-.39-1.42 0z' fill='%23fff'/%3E %3C/svg%3E\");\n  }\n\n/* ADD / SAVE TASK BUTTON */\n#add-task-btn{\n    font-family: inherit; /* Ensures we use the imported font */\n    width: 150px;\n    padding-top: 16px;\n    padding-bottom: 16px;\n    border-radius: 20px;\n    background: var(--light-gray);\n    font-size: larger;\n\n    border: 2px solid black;\n    box-shadow: var(--light-blue) 4px 4px 0 0,black 4px 4px 0 1px;\n\n    transition: transform .2s;\n}\n\n#add-task-btn:hover{\n    transform: scale(1.15);\n}\n\n#save-tasks-btn{\n    font-family: inherit; /* Ensures we use the imported font */\n    width: 150px;\n    padding-top: 16px;\n    padding-bottom: 16px;\n    border-radius: 20px;\n    background: var(--light-gray);\n    font-size: larger;\n    margin-bottom: 24px; /* Add some space to the bottom of the page. */\n\n    border: 2px solid black;\n    box-shadow: var(--light-blue) 4px 4px 0 0,black 4px 4px 0 1px;\n\n    transition: transform .2s;\n}\n\n#save-tasks-btn:hover{\n    transform: scale(1.15);\n}\n\n\n\n\n"],sourceRoot:""}]);const p=c},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var A={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(A[s]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);r&&A[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),e.push(c))}},e}},417:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},A=[],i=0;i<n.length;i++){var s=n[i],d=r.base?s[0]+r.base:s[0],c=a[d]||0,l="".concat(d," ").concat(c);a[d]=c+1;var p=t(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var C=o(u,r);r.byIndex=i,e.splice(i,0,{identifier:l,updater:C,references:1})}A.push(l)}return A}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var A=0;A<a.length;A++){var i=t(a[A]);e[i].references--}for(var s=r(n,o),d=0;d<a.length;d++){var c=t(a[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=s}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},970:n=>{n.exports="data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%2724%27 height=%2724%27 viewBox=%270 0 24 24%27%3E %3Cpath d=%27M15.88 8.29L10 14.17l-1.88-1.88a.996.996 0 1 0-1.41 1.41l2.59 2.59c.39.39 1.02.39 1.41 0L17.3 9.7a.996.996 0 0 0 0-1.41c-.39-.39-1.03-.39-1.42 0z%27 fill=%27%23fff%27/%3E %3C/svg%3E"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(72),e=t.n(n),r=t(825),o=t.n(r),a=t(659),A=t.n(a),i=t(56),s=t.n(i),d=t(540),c=t.n(d),l=t(113),p=t.n(l),u=t(208),C={};C.styleTagTransform=p(),C.setAttributes=s(),C.insert=A().bind(null,"head"),C.domAPI=o(),C.insertStyleElement=c(),e()(u.A,C),u.A&&u.A.locals&&u.A.locals;let g,m=25,B=0,b=!0,h=null;const x=document.querySelector("#restart-timer-btn"),f=document.querySelector("#choose-time-btn"),I=document.querySelector("#toggle-timer-btn"),v=document.querySelector(".timer-circle"),k=document.querySelector("#add-task-btn"),y=document.querySelector("#task-container"),E=JSON.parse(localStorage.getItem("tasks"))||[];function w(){document.querySelector("#timer").textContent=S(m,B),0===m&&0===B?(clearInterval(g),alert("Time is up, take a break!")):b||(B>0?B--:(B=59,m--))}function S(n,e){return`${String(n).padStart(2,"0")}:${String(e).padStart(2,"0")}`}k.addEventListener("click",(()=>{!function(){const n=document.createElement("div");n.classList.add("task-item");const e=document.createElement("input");e.classList.add("task-text"),n.appendChild(e);const t=document.createElement("input");t.type="checkbox",t.classList.add("task-checkbox"),n.appendChild(t);const r=document.createElement("button");r.textContent="X",r.classList.add("delete-task-btn"),r.addEventListener("click",(()=>{n.remove()})),n.appendChild(r),y.appendChild(n)}()})),function(){for(var n=0;n<E.length;n++){var e=E[n];const t=document.createElement("div");t.classList.add("task-item");const r=document.createElement("input");r.classList.add("task-text"),r.value=e.task,t.appendChild(r);const o=document.createElement("input");o.type="checkbox",o.classList.add("task-checkbox"),o.checked=e.checked,t.appendChild(o);const a=document.createElement("button");a.classList.add("delete-task-btn"),a.textContent="X",a.addEventListener("click",(()=>{t.remove()})),t.appendChild(a),y.appendChild(t)}}(),I.addEventListener("click",(()=>{b=!b,b?(clearInterval(g),I.textContent="Start",I.style.backgroundColor="#6af1a3",v.style.borderColor="#6af1a3"):(g=setInterval(w,1e3),I.textContent="Pause",console.log("paused"),I.style.backgroundColor="#ff7a61",v.style.borderColor="#ff7a61")})),x.addEventListener("click",(()=>{clearInterval(g),m=h||25,B=0,b=!0,document.querySelector("#timer").textContent=S(m,B),I.textContent="Start",I.style.backgroundColor="#6af1a3",v.style.borderColor="#6af1a3"})),f.addEventListener("click",(()=>{const n=prompt("Enter new time in minutes");!isNaN(n)&&n>0?(h=parseInt(n),m=h,B=0,b=!0,document.querySelector("#timer").textContent=S(m,B),clearInterval(g),I.textContent="Start",I.style.backgroundColor="#6af1a3",v.style.borderColor="#6af1a3"):alert("Invalid input. Must be a number greater than 0.")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,