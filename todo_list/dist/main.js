(()=>{"use strict";var n={208:(n,t,e)=>{e.d(t,{A:()=>i});var r=e(354),o=e.n(r),a=e(314),A=e.n(a)()(o());A.push([n.id,"@import url(https://fonts.googleapis.com/css?family=Roboto Mono);"]),A.push([n.id,":root{\n    --light-blue: #b3e0ff;\n    --dark-mode-gray: #2b2b2b;\n    --light-gray: #525252;\n    --start-green: #6af1a3;\n    --stop-red: #ff7a61;\n}\n\n*{\n    margin: 0;\n    padding: 0;\n    color: white; /* all text color is white (dark mode) */\n}\n\nbody{\n    font-family: 'Roboto Mono';\n    height: 100vh;\n    background: var(--dark-mode-gray);\n}\n\nhr{ /* have to override default hr styles */\n    margin: 0;\n    align-self: stretch;\n}\n\n.divider{\n    width: 75%;\n    align-self: center;\n}\n\n/* HEADER */\n#header{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 24px;\n\n    margin-top: 24px;\n    margin-bottom: 24px;\n}\n\n/* CONTENT */\n#content{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 24px;\n}\n\n/* POMODORO TIMER */\n.pomodoro-timer{\n    background-color: var(--light-gray);\n    border-radius: 20px;\n    border: 3px solid var(--dark-mode-gray);\n    box-shadow: var(--light-blue) 4px 4px 0 0,black 4px 4px 0 1px;\n    padding: 10px 20px;\n    transition: transform 0.2s;\n    width: 35%;\n    height: fit-content;\n    text-align: center;\n    padding: 28px 0px;\n}\n\n.timer-circle{\n    border-radius: 50%;\n    width: 100px;\n    height: 100px;\n    margin: 20px auto; /* 20px top and bottom, auto left and right */\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 24px;\n    color: black;\n    border: 8px solid var(--start-green);\n}\n\n#timer{\n    color: white;\n}\n\n.timer-controls{\n    margin-top: 35px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 24px;\n}\n\n.timer-controls button{\n    font-family: inherit;\n    font-size: 14px;\n    padding: 10px 20px;\n    border-radius: 12px;\n    cursor: pointer;\n    background: var(--light-gray);\n    border: 2px solid white;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\n\n    /* animation */\n    transition: transform .2s;\n}\n\n.timer-controls button:hover{\n    transform: scale(1.25);\n}\n\n.button-disabled{\n    pointer-events: none;\n    background-color: #d5d5d5;\n}\n\n#toggle-timer-btn{\n    border: 2px solid var(--dark-mode-gray);\n    color: var(--dark-mode-gray);\n    background-color: var(--start-green);\n}\n\n/* .toggle-timer-btn-paused{\n    background-color: red;\n} */\n\n/* TASK LIST */\n\n/* ADD TASK BUTTON */\n#add-task-btn{\n    font-family: inherit; /* Ensures we use the imported font */\n    width: 150px;\n    padding-top: 16px;\n    padding-bottom: 16px;\n    border-radius: 20px;\n    background: var(--light-gray);\n    font-size: larger;\n\n    border: 2px solid black;\n    box-shadow: var(--light-blue) 4px 4px 0 0,black 4px 4px 0 1px;\n\n    transition: transform .2s;\n}\n\n#add-task-btn:hover{\n    transform: scale(1.15);\n}\n\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,qBAAqB;IACrB,yBAAyB;IACzB,qBAAqB;IACrB,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY,EAAE,wCAAwC;AAC1D;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,iCAAiC;AACrC;;AAEA,IAAI,uCAAuC;IACvC,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,kBAAkB;AACtB;;AAEA,WAAW;AACX;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;;IAET,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA,YAAY;AACZ;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA,mBAAmB;AACnB;IACI,mCAAmC;IACnC,mBAAmB;IACnB,uCAAuC;IACvC,6DAA6D;IAC7D,kBAAkB;IAClB,0BAA0B;IAC1B,UAAU;IACV,mBAAmB;IACnB,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,iBAAiB,EAAE,6CAA6C;IAChE,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,eAAe;IACf,YAAY;IACZ,oCAAoC;AACxC;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,eAAe;IACf,SAAS;AACb;;AAEA;IACI,oBAAoB;IACpB,eAAe;IACf,kBAAkB;IAClB,mBAAmB;IACnB,eAAe;IACf,6BAA6B;IAC7B,uBAAuB;IACvB,yFAAyF;;IAEzF,cAAc;IACd,yBAAyB;AAC7B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,oBAAoB;IACpB,yBAAyB;AAC7B;;AAEA;IACI,uCAAuC;IACvC,4BAA4B;IAC5B,oCAAoC;AACxC;;AAEA;;GAEG;;AAEH,cAAc;;AAEd,oBAAoB;AACpB;IACI,oBAAoB,EAAE,qCAAqC;IAC3D,YAAY;IACZ,iBAAiB;IACjB,oBAAoB;IACpB,mBAAmB;IACnB,6BAA6B;IAC7B,iBAAiB;;IAEjB,uBAAuB;IACvB,6DAA6D;;IAE7D,yBAAyB;AAC7B;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["@import url('https://fonts.googleapis.com/css?family=Roboto Mono');\n\n:root{\n    --light-blue: #b3e0ff;\n    --dark-mode-gray: #2b2b2b;\n    --light-gray: #525252;\n    --start-green: #6af1a3;\n    --stop-red: #ff7a61;\n}\n\n*{\n    margin: 0;\n    padding: 0;\n    color: white; /* all text color is white (dark mode) */\n}\n\nbody{\n    font-family: 'Roboto Mono';\n    height: 100vh;\n    background: var(--dark-mode-gray);\n}\n\nhr{ /* have to override default hr styles */\n    margin: 0;\n    align-self: stretch;\n}\n\n.divider{\n    width: 75%;\n    align-self: center;\n}\n\n/* HEADER */\n#header{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 24px;\n\n    margin-top: 24px;\n    margin-bottom: 24px;\n}\n\n/* CONTENT */\n#content{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 24px;\n}\n\n/* POMODORO TIMER */\n.pomodoro-timer{\n    background-color: var(--light-gray);\n    border-radius: 20px;\n    border: 3px solid var(--dark-mode-gray);\n    box-shadow: var(--light-blue) 4px 4px 0 0,black 4px 4px 0 1px;\n    padding: 10px 20px;\n    transition: transform 0.2s;\n    width: 35%;\n    height: fit-content;\n    text-align: center;\n    padding: 28px 0px;\n}\n\n.timer-circle{\n    border-radius: 50%;\n    width: 100px;\n    height: 100px;\n    margin: 20px auto; /* 20px top and bottom, auto left and right */\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 24px;\n    color: black;\n    border: 8px solid var(--start-green);\n}\n\n#timer{\n    color: white;\n}\n\n.timer-controls{\n    margin-top: 35px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 24px;\n}\n\n.timer-controls button{\n    font-family: inherit;\n    font-size: 14px;\n    padding: 10px 20px;\n    border-radius: 12px;\n    cursor: pointer;\n    background: var(--light-gray);\n    border: 2px solid white;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\n\n    /* animation */\n    transition: transform .2s;\n}\n\n.timer-controls button:hover{\n    transform: scale(1.25);\n}\n\n.button-disabled{\n    pointer-events: none;\n    background-color: #d5d5d5;\n}\n\n#toggle-timer-btn{\n    border: 2px solid var(--dark-mode-gray);\n    color: var(--dark-mode-gray);\n    background-color: var(--start-green);\n}\n\n/* .toggle-timer-btn-paused{\n    background-color: red;\n} */\n\n/* TASK LIST */\n\n/* ADD TASK BUTTON */\n#add-task-btn{\n    font-family: inherit; /* Ensures we use the imported font */\n    width: 150px;\n    padding-top: 16px;\n    padding-bottom: 16px;\n    border-radius: 20px;\n    background: var(--light-gray);\n    font-size: larger;\n\n    border: 2px solid black;\n    box-shadow: var(--light-blue) 4px 4px 0 0,black 4px 4px 0 1px;\n\n    transition: transform .2s;\n}\n\n#add-task-btn:hover{\n    transform: scale(1.15);\n}\n\n\n"],sourceRoot:""}]);const i=A},314:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var A={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(A[s]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&A[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},354:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},72:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},A=[],i=0;i<n.length;i++){var s=n[i],c=r.base?s[0]+r.base:s[0],d=a[c]||0,l="".concat(c," ").concat(d);a[c]=d+1;var p=e(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var m=o(u,r);r.byIndex=i,t.splice(i,0,{identifier:l,updater:m,references:1})}A.push(l)}return A}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var A=0;A<a.length;A++){var i=e(a[A]);t[i].references--}for(var s=r(n,o),c=0;c<a.length;c++){var d=e(a[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=s}}},659:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},540:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},56:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},113:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{var n=e(72),t=e.n(n),r=e(825),o=e.n(r),a=e(659),A=e.n(a),i=e(56),s=e.n(i),c=e(540),d=e.n(c),l=e(113),p=e.n(l),u=e(208),m={};m.styleTagTransform=p(),m.setAttributes=s(),m.insert=A().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),t()(u.A,m),u.A&&u.A.locals&&u.A.locals;let f,g=25,C=0,B=!0,x=null;const b=document.querySelector("#restart-timer-btn"),I=document.querySelector("#choose-time-btn"),h=document.querySelector("#toggle-timer-btn"),v=(document.querySelector(".pomodoro-timer"),document.querySelector(".timer-circle"));function y(){document.querySelector("#timer").textContent=k(g,C),0===g&&0===C?(clearInterval(f),alert("Time is up, take a break!")):B||(C>0?C--:(C=59,g--))}function k(n,t){return`${String(n).padStart(2,"0")}:${String(t).padStart(2,"0")}`}h.addEventListener("click",(()=>{B=!B,B?(clearInterval(f),h.textContent="Start",h.style.backgroundColor="#6af1a3",v.style.borderColor="#6af1a3"):(f=setInterval(y,1e3),h.textContent="Pause",console.log("paused"),h.style.backgroundColor="#ff7a61",v.style.borderColor="#ff7a61")})),b.addEventListener("click",(()=>{clearInterval(f),g=x||25,C=0,B=!0,document.querySelector("#timer").textContent=k(g,C),h.textContent="Start",h.style.backgroundColor="#6af1a3"})),I.addEventListener("click",(()=>{const n=prompt("Enter new time in minutes");!isNaN(n)&&n>0?(x=parseInt(n),g=x,C=0,B=!0,document.querySelector("#timer").textContent=k(g,C),clearInterval(f),h.textContent="Start",h.style.backgroundColor="#6af1a3"):alert("Invalid input. Must be a number greater than 0.")})),function(n){let t;try{t=window[n];const e="__storage_test__";return t.setItem(e,e),t.removeItem(e),!0}catch(n){return n instanceof DOMException&&(22===n.code||1014===n.code||"QuotaExceededError"===n.name||"NS_ERROR_DOM_QUOTA_REACHED"===n.name)&&t&&0!==t.length}}?console.log("available"):console.log("too bad")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,